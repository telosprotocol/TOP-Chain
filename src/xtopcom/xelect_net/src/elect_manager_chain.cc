#include "xelect_net/include/elect_manager_chain.h"

#include <chrono>
#include <limits>

#include "xpbase/base/top_log.h"
#include "xpbase/base/xip_parser.h"
#include "xwrouter/register_message_handler.h"
#include "xwrouter/multi_routing/small_net_cache.h"
#include "xchain_timer/xchain_timer.h"
#include "xelect_net/include/node_manager.h"
#include "xelect_net/include/elect_uitils.h"
#include "xbasic/xelapsed_time.h"

#include "xbasic/xutility.h"

namespace top {

namespace elect {

ElectManagerChain::ElectManagerChain(
        transport::TransportPtr transport,
        const base::Config& config)
        : ElectManagerMulNet(transport, config) {}

void ElectManagerChain::OnElectUpdated(const std::vector<ElectNetNode>& elect_data) {
    return ElectManagerMulNet::OnElectUpdated(elect_data);
}

int  ElectManagerChain::OnElectQuit(const base::XipParser& xip) {
    return ElectManagerMulNet::OnElectQuit(xip);
}

int ElectManagerChain::OnElectDropNodes(
        const base::XipParser& xip,
        const std::vector<std::string>& drop_accounts) {
    return ElectManagerMulNet::OnElectDropNodes(xip, drop_accounts);
}

// unregister routing table
int ElectManagerChain::OnElectQuit(const common::xip2_t& xip2) {
    base::XipParser xip;
    xip.set_xnetwork_id(static_cast<uint32_t>(xip2.network_id().value()));
    xip.set_zone_id(static_cast<uint8_t>(xip2.zone_id().value()));
    xip.set_cluster_id(static_cast<uint8_t>(xip2.cluster_id().value()));
    xip.set_group_id(static_cast<uint8_t>(xip2.group_id().value()));
    //xip.set_network_type((uint8_t)(address.cluster_address().type()));

    return OnElectQuit(xip);
}

int ElectManagerChain::OnElectDropNodes(
        uint64_t chain_xip_high,
        uint64_t chain_xip_low,
        const std::vector<std::string>& drop_accounts) {
    base::XipParser xip(chain_xip_high, chain_xip_low);
    return OnElectDropNodes(xip, drop_accounts);
}

void ElectManagerChain::OnElectUpdated(const data::election::xelection_result_store_t& election_result_store, common::xzone_id_t const & zid) {
    using top::data::election::xelection_cluster_result_t;
    using top::data::election::xelection_group_result_t;
    using top::data::election::xelection_info_bundle_t;
    using top::data::election::xelection_info_t;
    using top::data::election::xelection_result_store_t;
    using top::data::election::xelection_result_t;
    std::vector<ElectNetNode> elect_data;

    TOP_DEBUG("elect_manager_chain onelectupdated begin");
    for (auto const & election_result_info : election_result_store) {
        auto const network_id = top::get<common::xnetwork_id_t const>(election_result_info);
        auto const& election_type_results = top::get<data::election::xelection_network_result_t>(election_result_info);
        for (auto const & election_type_result : election_type_results) {
            auto node_type = top::get<common::xnode_type_t const>(election_type_result);
            auto const & election_result = top::get<data::election::xelection_result_t>(election_type_result);

            if (common::has<common::xnode_type_t::archive>(node_type) && zid == common::xdefault_zone_id) {
                // skip archive election result generated by ZEC.
                // Since only REC elects archive group, but ZEC's logic is not disable.
                continue;
            }

            for (auto const & cluster_result_info : election_result) {
                auto const & cluster_id = top::get<common::xcluster_id_t const>(cluster_result_info);
                auto const & cluster_result = top::get<xelection_cluster_result_t>(cluster_result_info);

                for (auto const & group_result_info : cluster_result) {
                    auto const & group_id = top::get<common::xgroup_id_t const>(group_result_info);
                    auto const & group_result = top::get<xelection_group_result_t>(group_result_info);

                    common::xip2_t xip2{
                        network_id,
                        zid,
                        cluster_id,
                        group_id
                    };

                    for (auto const & node_info : group_result) {
                        auto const & node_id = top::get<xelection_info_bundle_t>(node_info).node_id();
                        if (node_id.empty()) {
                            continue;
                        }
                        auto const & election_info = top::get<xelection_info_bundle_t>(node_info).election_info();

                        uint64_t version = std::numeric_limits<uint64_t>::max();
                        if (group_result.group_version().has_value()) {
                            version        = group_result.group_version().value();
                        }

                        uint8_t associated_gid = 0;
                        if (group_result.associated_group_id().has_value()) {
                            associated_gid = group_result.associated_group_id().value();
                        }

                        //base::XipParser xip(xip2.raw_high_part(), xip2.raw_low_part());
                        base::XipParser xip;
                        xip.set_xnetwork_id(static_cast<uint32_t>(xip2.network_id().value()));
                        xip.set_zone_id(static_cast<uint8_t>(xip2.zone_id().value()));
                        xip.set_cluster_id(static_cast<uint8_t>(xip2.cluster_id().value()));
                        xip.set_group_id(static_cast<uint8_t>(xip2.group_id().value()));
                        //xip.set_network_type((uint8_t)(address.cluster_address().type()));
                        ElectNetNode enode {node_id.to_string(), election_info.consensus_public_key.to_string(), xip, "", associated_gid, version};
                        elect_data.push_back(enode);
                    } // end for (auto const & node_info : group_result) {
                } // end for (auto const & group_result_info : cluster_result) {
            } // end for (auto const & cluster_result_info : election_result) {
        }
    } // end for (auto const & election_result_info : election_result_store) {

    TOP_INFO("elect_manager_chain onelectupdated end, size:%u", elect_data.size());
    return OnElectUpdated(elect_data);
}

}  // namespace elect

}  // namespace top
