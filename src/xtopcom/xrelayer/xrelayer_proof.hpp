
// Copyright (c) 2017-2018 Telos Foundation & contributors
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php

#pragma once
#include <vector>
#include "xrelayer_header.hpp"


namespace top {
   
namespace xrelayer {
        

using namespace top::evm_common;

typedef struct _xMerklePathItem {
    h256     hash;
    uint8_t         direction; 
}xMerklePathItem;

typedef struct _xMerklePath {
    std::vector<xMerklePathItem>  items;
}xMerklePath;

typedef struct ExecutionStatus {
    uint8_t enumIndex;
    bool unknown;
    bool failed;
    bytes successValue;        // The final action succeeded and returned some value or an empty vec.
    h256 successReceiptId; // The final action of the receipt returned a promise or the signed transaction was converted to a receipt. Contains the receipt_id of the generated receipt.
}x_ExecutionStatus;

typedef struct ExecutionOutcome {
    std::vector<h256>   receipt_ids;        // Receipt IDs generated by this transaction or receipt.
    uint64_t            gas_burnt;          // The amount of the gas burnt by the given transaction or receipt.
    u128                tokens_burnt;      // The total number of the tokens burnt by the given transaction or receipt.
    bytes               executor_id;        // Hash of the transaction or receipt id that produced this outcome.
    ExecutionStatus     status;             // Execution status. Contains the result in case of successful execution.
    std::vector<h256>   merkelization_hashes;
}x_ExecutionOutcome;


typedef struct ExecutionOutcomeWithId {
    h256                id; // The transaction hash or the receipt ID.
    x_ExecutionOutcome  outcome;
    h256                hash;
}x_ExecutionOutcomeWithId;

typedef struct ExecutionOutcomeWithIdAndProof {
    xMerklePath            proof;
    h256                    block_hash;
    ExecutionOutcomeWithId  outcome_with_id;
}x_ExecutionOutcomeWithIdAndProof;


typedef struct _xFullOutcomeProof {
    x_ExecutionOutcomeWithIdAndProof outcome_proof;
    xMerklePath                      outcome_root_proof; // TODO: now empty array
    xRelayerBlockInnerHeader         block_header_lite;
    xMerklePath                      block_proof;
}xFullOutcomeProof;

}
}